{"version":3,"sources":["logo.svg","tweets/components.js","tweets/utils.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","e","preventDefault","tweetContent","current","value","tempNewTweets","unshift","content","likes","id","ref","name","required","type","TweetsList","ActionBtn","tweet","setLikes","justClicked","setJustClicked","action","buttonText","toString","onClick","event","Tweet","tweetsInit","setTweetsInit","tweetsList","setTweetsList","useEffect","finalList","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","console","log","send","loadTweets","map","item","index","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultElem","document","getElementById","tweetme2Elem","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d716184e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react';\r\nimport {loadTweets} from './utils';\r\n\r\nexport function TweetsComponent(props){\r\n  const [newTweets, setNewTweets] = useState([])\r\n  const textAreaRef = React.createRef();\r\n\r\n  const handleSubmit = function(e){\r\n    e.preventDefault();\r\n    const tweetContent = textAreaRef.current.value;\r\n    let tempNewTweets = [...newTweets];\r\n    tempNewTweets.unshift({\r\n      content: tweetContent,\r\n      likes: 0,\r\n      id: 42423\r\n    });\r\n    setNewTweets(tempNewTweets);\r\n    textAreaRef.current.value = '';\r\n  }\r\n  return (\r\n    <div className={props.className}>\r\n      <div className=\"col-12 mb-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <textarea ref={textAreaRef} className=\"form-control\" name=\"tweet\" required={true}></textarea>\r\n          <button type=\"submit\" className=\"btn btn-primary my-3\">Tweet</button>\r\n        </form>\r\n      </div>\r\n      <TweetsList newTweets={newTweets}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function ActionBtn(props){\r\n    const tweet = props.tweet;\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n    const [justClicked, setJustClicked] = useState(false);\r\n    const styles = {\r\n        \"Like\": \"btn btn-primary btn-sm\",\r\n        \"Unlike\":\"btn btn-danger btn-sm\",\r\n        \"Retweet\": \"btn btn-success btn-sm\"\r\n    };\r\n    const className = props.className ? props.className : styles[props.action];\r\n    const buttonText = (props.action === \"Like\" ? likes.toString() + \" \" : \"\") + props.action + (props.action === \"Like\" ? \"(s)\" : \"\");\r\n    const handleClick =(event) => {\r\n        event.preventDefault();\r\n        if (props.action === \"Like\"){\r\n            if (!justClicked){\r\n                setLikes(likes + 1);\r\n                setJustClicked(true);\r\n            } else {\r\n                setLikes(likes - 1);\r\n                setJustClicked(false);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n      <button className={className} onClick={handleClick}>\r\n        {buttonText}\r\n      </button>\r\n    );\r\n}\r\n  \r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : \"col-10 mx-auto col-md-6\"\r\n    return (\r\n    <div className={className}>\r\n      <p>{tweet.id} - {tweet.content}</p>\r\n      <div>\r\n        <ActionBtn tweet={tweet} action=\"Like\" />\r\n        <ActionBtn tweet={tweet} action=\"Unlike\" />\r\n        <ActionBtn tweet={tweet} action=\"Retweet\" />\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n  \r\nexport function TweetsList(props){\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweetsList, setTweetsList] = useState([]);\r\n\r\n  const addNewTweets = () => {\r\n    const finalList = [...props.newTweets].concat(tweetsInit);\r\n    if (finalList.length !== tweetsList.length){\r\n      setTweetsList(finalList);\r\n    }\r\n  }\r\n\r\n  const tweetsLookup = () => {\r\n    const myCallback = (response, status) => {\r\n      if (status === 200){\r\n        setTweetsInit(response);\r\n      }\r\n    }\r\n    loadTweets(myCallback);\r\n  }\r\n  useEffect(addNewTweets, [props.newTweets, tweetsInit, tweetsList]);\r\n  useEffect(tweetsLookup, []);\r\n  return (\r\n    tweetsList.map((item, index) => {\r\n      return <Tweet tweet={item} key={`${index}-{item.id}`} className=\"my-5 py-5 border bg-white text-dark\"/>\r\n    })\r\n  )\r\n}","export function loadTweets(callback){\r\n    const xhr = new XMLHttpRequest();\r\n    const method = 'GET';\r\n    const url = 'http://localhost:8000/api/tweets';\r\n    const responseType = 'json';\r\n  \r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function() {\r\n      callback(xhr.response, xhr.status);\r\n    }\r\n    xhr.onerror = function(e){\r\n      console.log(e);\r\n      callback({\"message\": \"Error occurred when fetching tweets.\"});\r\n    }\r\n    xhr.send();\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TweetsComponent } from './tweets';\n\nlet defaultElem = document.getElementById('root');\nlet tweetme2Elem = document.getElementById('tweetme2');\nif (defaultElem) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App defaultElem />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );  \n}\nif (tweetme2Elem){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent tweetme2Elem />\n    </React.StrictMode>,\n    document.getElementById('tweetme2')\n  );  \n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}